// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System.Linq;
using Microsoft.Data.Entity.Metadata;
using Microsoft.Extensions.CodeGeneration.EntityFramework.Test.TestModels;
using Xunit;

namespace Microsoft.Extensions.CodeGeneration.EntityFramework.Test
{
    public class PropertyMetadataTests
    {
        [Fact]
        public void Primary_Key_Metadata_Is_Correct()
        {
            //Arrange
            var productEntity = TestModel.CategoryProductModel.GetEntityType(typeof(Product));
            var modelMetadata = new ModelMetadata(productEntity, typeof(TestDbContext));

            //Act
            var propertyMetadata = modelMetadata.Properties.FirstOrDefault(p => p.PropertyName == "ProductId");

            //Assert
            Assert.Equal("ProductId", propertyMetadata.PropertyName);
            Assert.Equal(true, propertyMetadata.IsPrimaryKey);
            Assert.Equal(false, propertyMetadata.IsForeignKey);
            Assert.Equal(typeof(int).FullName, propertyMetadata.TypeName);
            Assert.Equal(false, propertyMetadata.IsEnum);
            Assert.Equal(false, propertyMetadata.IsAutoGenerated);
            Assert.Equal(false, propertyMetadata.IsEnumFlags);
            Assert.Equal(false, propertyMetadata.IsReadOnly);
            Assert.Equal(true, propertyMetadata.Scaffold);
        }

        [Fact]
        public void Foreign_Key_Metadata_Is_Correct()
        {
            //Arrange
            var productEntity = TestModel.CategoryProductModel.GetEntityType(typeof(Product));
            var modelMetadata = new ModelMetadata(productEntity, typeof(TestDbContext));

            //Act
            var propertyMetadata = modelMetadata.Properties.FirstOrDefault(p => p.PropertyName == "CategoryId");

            //Assert
            Assert.Equal("CategoryId", propertyMetadata.PropertyName);
            Assert.Equal(false, propertyMetadata.IsPrimaryKey);
            Assert.Equal(true, propertyMetadata.IsForeignKey);
            Assert.Equal(typeof(int).FullName, propertyMetadata.TypeName);
            Assert.Equal(false, propertyMetadata.IsEnum);
            Assert.Equal(false, propertyMetadata.IsAutoGenerated);
            Assert.Equal(false, propertyMetadata.IsEnumFlags);
            Assert.Equal(false, propertyMetadata.IsReadOnly);
            Assert.Equal(true, propertyMetadata.Scaffold);
        }

        [Fact]
        public void String_Property_Metadata_Is_Correct()
        {
            //Arrange
            var productEntity = TestModel.CategoryProductModel.GetEntityType(typeof(Product));
            var modelMetadata = new ModelMetadata(productEntity, typeof(TestDbContext));

            //Act
            var propertyMetadata = modelMetadata.Properties.FirstOrDefault(p => p.PropertyName == "ProductName");

            //Assert
            Assert.Equal("ProductName", propertyMetadata.PropertyName);
            Assert.Equal(false, propertyMetadata.IsPrimaryKey);
            Assert.Equal(false, propertyMetadata.IsForeignKey);
            Assert.Equal(typeof(string).FullName, propertyMetadata.TypeName);
            Assert.Equal(false, propertyMetadata.IsEnum);
        }

        [Fact]
        public void Enum_Property_Metadata_Is_Correct()
        {
            //Arrange
            var productEntity = TestModel.CategoryProductModel.GetEntityType(typeof(Product));
            var modelMetadata = new ModelMetadata(productEntity, typeof(TestDbContext));

            //Act
            var propertyMetadata = modelMetadata.Properties.FirstOrDefault(p => p.PropertyName == "ProductEnumProperty");

            //Assert
            Assert.Equal("ProductEnumProperty", propertyMetadata.PropertyName);
            Assert.Equal(false, propertyMetadata.IsPrimaryKey);
            Assert.Equal(false, propertyMetadata.IsForeignKey);
            Assert.Equal(typeof(EnumType).FullName, propertyMetadata.TypeName);
            Assert.Equal(true, propertyMetadata.IsEnum);
        }
    }
}