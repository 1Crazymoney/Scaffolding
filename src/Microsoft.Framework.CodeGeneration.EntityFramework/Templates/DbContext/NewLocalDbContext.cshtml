@inherits Microsoft.Framework.CodeGeneration.Templating.RazorTemplateBase
using Microsoft.Data.Entity;
@{
    foreach (var namespaceName in Model.RequiredNamespaces)
    {
@:using @namespaceName;
    }
@:
    string baseClassName;
    if (String.Equals(Model.DbContextTypeName, "DbContext", StringComparison.Ordinal))
    {
        baseClassName = "Microsoft.Data.Entity.DbContext";
    }
    else
    {
        baseClassName = "DbContext";
    }
    if (!String.IsNullOrEmpty(Model.DbContextNamespace))
    {
@:namespace @Model.DbContextNamespace
@:{
    //PushIndent("    ");
    } 
}    public class @Model.DbContextTypeName : @baseClassName
    {
        // Scaffolding generated this DbContext class however it
        // is not registered using dependency injection. Add these
        // lines of code to your Startup.cs class in ConfigureServices
        // method for the DbContext to work properly and available
        // for Controller through dependency injection.
        //
        // services.AddEntityFramework()
        //     .AddSqlServer()
        //     .AddDbContext<@Model.DbContextTypeName>();

        private static bool _created = false;

        public @(Model.DbContextTypeName)()
        {
            if (!_created)
            {
                _created = true;
                Database.EnsureCreated();
            }
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer(@@"Server=(localdb)\mssqllocaldb;Database=@Model.DbContextTypeName;Trusted_Connection=True;MultipleActiveResultSets=true");
        }

        protected override void OnModelCreating(ModelBuilder builder)
        {
        }

        public DbSet<@Model.ModelTypeName> @Model.ModelTypeName { get; set; }
    }
@{
    if (!String.IsNullOrEmpty(Model.DbContextNamespace))
    { 
        //ClearIndent();
@:}
    }
}